
services:
  # --- Сервис базы данных PostgreSQL ---
  db:
    image: postgres:17-alpine # Обновленная версия
    container_name: postgres_db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "5433:5432" # Обновленный хост-порт
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - mynetwork
    restart: unless-stopped

  # --- Сервис Redis ---
  redis:
    image: redis:7-alpine
    container_name: redis_cache
    command: redis-server --requirepass ${REDIS_PASSWORD}
    env_file:
      - .env
    ports:
      - "6381:6379" # Обновленный хост-порт
    volumes:
      - redis_data:/data
    healthcheck:
      # Убедитесь, что redis-cli доступен на хосте или измените на nc, если нет
      test: ["CMD", "redis-cli", "-h", "localhost", "-p", "6379", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - mynetwork
    restart: unless-stopped

  # --- Сервис RabbitMQ ---
  rabbitmq:
    image: rabbitmq:3.13-management-alpine # Обновленная версия
    container_name: rabbitmq_broker
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
    ports:
      - "5674:5672"   # Обновленный хост-порт AMQP
      - "15674:15672" # Обновленный хост-порт Web UI
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - mynetwork
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
    restart: unless-stopped

  # --- Сервис веб-приложения Django (Gunicorn) ---
  web:
    build: .
    container_name: django_web
    command: web
    volumes:
      - ./myshop:/home/appuser/web
      - static_volume:/home/appuser/web/staticfiles
      - media_volume:/home/appuser/web/media
    expose:
      - 8000 # Внутренний порт для Nginx
    env_file:
      - .env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - mynetwork
    restart: on-failure
    healthcheck:
       # nc должен быть установлен в образе web (мы это делали)
       test: ["CMD", "nc", "-z", "localhost", "8000"]
       interval: 15s
       timeout: 5s
       retries: 3
       start_period: 30s
    

  # --- Сервис Celery Worker ---
  celery_worker:
    build: .
    container_name: celery_worker
    command: celery_worker
    volumes:
      - ./myshop:/home/appuser/web
      - media_volume:/home/appuser/web/media
    env_file:
      - .env
    depends_on:
      web:
        # Можно изменить на service_healthy, если healthcheck для web стабилен
        condition: service_started
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      db:
        condition: service_healthy
    networks:
      - mynetwork
    restart: unless-stopped

  # --- Сервис Flower (Мониторинг Celery) ---
  flower:
    build: .
    container_name: celery_flower
    command: celery_flower
    volumes:
      - ./myshop:/home/appuser/web
    env_file:
      - .env
    expose:
      - 5555 # Внутренний порт для Nginx
    depends_on:
      web:
        condition: service_started # Или service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - mynetwork
    restart: unless-stopped

  # --- Сервис Stripe CLI для прослушивания вебхуков ---
  stripe-cli:
    image: stripe/stripe-cli:latest
    container_name: stripe_listener
    # Используем подтвержденный путь /payment/webhook/
    command: listen --forward-to http://web:8000/payment/webhook/ --api-key ${STRIPE_SECRET_KEY}
    env_file:
      - .env
    environment:
      STRIPE_DEVICE_NAME: docker-compose-listener
    networks:
      - mynetwork
    depends_on:
      - web # Запускать после старта веб-сервиса
    restart: unless-stopped

  # --- Сервис Nginx (Веб-сервер / Прокси) ---
  nginx:
    image: nginx:1.25-alpine
    container_name: nginx_proxy
    ports:
      - "8080:80" # Обновленный хост-порт
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - static_volume:/home/appuser/web/staticfiles
      - media_volume:/home/appuser/web/media
    depends_on:
      - web
      - flower
    networks:
      - mynetwork
    restart: always

# --- Именованные Volumes ---
volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  static_volume:
  media_volume:

# --- Сеть для взаимодействия контейнеров ---
networks:
  mynetwork:
    driver: bridge