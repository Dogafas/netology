cd "/mnt/d/НЕТОЛОГИЯ(не для ГИТ)/shop-diplom"

cd "D:\НЕТОЛОГИЯ(не для ГИТ)\shop-diplom"

.\env\myshop\Scripts\activate; cd myshop

celery -A myshop worker --loglevel=info --pool=solo

celery -A myshop flower --port=5555

--------------------------------------------------------
Чтобы протестировать работоспособность платежного сервиса нужно заргегистировать аккаунт вашего сервиса по ссылке https://dashboard.stripe.com/register
и сохранить ключи от Вашего зарегистрированного сервиса в переменные окружения:
STRIPE_PUBLISHABLE_KEY=pk_test_......XXXXXXXXXXXXXXXXXXXXXXXXX
STRIPE_SECRET_KEY=sk_test_XXXXXXXXXXXXXXXXXXXXXXXXX

Для того чтобы можно было отслеживать оплату заказов в админ панели магазина нужно:
1) установить Stripe CLI согласно инструкции приведенной на странице https://docs.stripe.com/stripe-cli
2) в командной строке: stripe login (перейти по ссылке и разрешить доступ)
Не забудьде запустить брокер сообщений RabbitMQ из docker:
docker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13.1-management
3) Запустить команду, чтобы Stripe пересылал события на локальный сервер Django:
stripe listen --forward-to 127.0.0.1:8000/payment/webhook/
4) сохранить полученную подпись для вебхуков: "whsec_..........3e1889ecd80" в переменную окружения STRIPE_WEBHOOK_SECRET
после чего можно тестировать оплату товаров из магазина с помощью "тестовых" карт (например для успешного платежа карта № 4242 4242 4242 4242 CVC: любые 3 цифры,
СРОК: любая будующая дата. Другие реквизиты карт можете посмотреть на  https://docs.stripe.com/testing)

в разделе для разработчиков (Developers -> Overwiew -> Create destination -> ) создается событие "payment_intent.succeeded"

------------------------------

docker-compose down -v # Флаг -v удалит и volumes, что даст чистый старт для всего
docker builder prune -a
docker-compose up --build --force-recreate

------
посмотреть список суперпользователей (администраторов) в Django
docker-compose exec web python manage.py shell -c "from django.contrib.auth import get_user_model; print(list(get_user_model().objects.filter(is_superuser=True).values('username', 'email')))"
docker-compose exec web python manage.py shell -c "from django.contrib.auth import get_user_model; print(list(get_user_model().objects.filter(is_superuser=True).values('username', 'email', 'password')))"



# воссстановление базы данных. Запускайте из папки D:\НЕТОЛОГИЯ(не для ГИТ)\shop-diplom\
docker cp "D:\dump-myshop-202504051853.sql" postgres_db:/tmp/mydump.dump
# Замените ВАШ_... на реальные значения из .env файла!
docker compose exec -e PGPASSWORD='o9i8u7y6' db pg_restore -U 'postgres' -d 'myshop' -h localhost --clean --if-exists -v /tmp/mydump.dump



для Юкасса запускаем вебхуки:
lt --port 8000
https://................../payment/webhook/yookassa/